library(MacKinlay)
load("../DATA/ISIN_A", envir = .GlobalEnv)
setwd("~/Dropbox (Cavorit)/Cavorit/akquiseundantraege/2015Q3MiSu02/RCode")
Verzeichnis="~/Dropbox (Cavorit)/Cavorit/AkquiseUndAntraege/Akquise_2015Q3MiSu02/RCode/"){
#setwd("~/Dropbox (Cavorit)/Cavorit/akquiseundantraege/2015Q3MiSu02/RCode")
Verzeichnis="~/Dropbox (Cavorit)/Cavorit/AkquiseUndAntraege/Akquise_2015Q3MiSu02/RCode/")
Verzeichnis="~/Dropbox (Cavorit)/Cavorit/AkquiseUndAntraege/Akquise_2015Q3MiSu02/RCode/"
setwd(Verzeichnis)
load("../DATA/ISIN_A", envir = .GlobalEnv)
load("../DATA/ISIN_B", envir = .GlobalEnv)
load("../DATA/ISIN_C", envir = .GlobalEnv)
load("../DATA/ISIN_AandB", envir = .GlobalEnv)
load("../DATA/ISIN_AorB", envir = .GlobalEnv)
load("../DATA/KURS", envir = .GlobalEnv)
load("../DATA_in_perCent/KURSinProzent.RData", envir = .GlobalEnv) # laedt unter dem Objekt KURS2 alles in Prozent
library(devtools)
getwd()
setwd("../ProjektPackage/MacKinlay/")
devtools::use_data(ISIN_A)
devtools::use_data(ISIN_B)
devtools::use_data(ISIN_C)
devtools::use_data(ISIN_AandB)
devtools::use_data(ISIN_AorB)
devtools::use_data(KURS)
devtools::use_data(KURS2)
library(MacKinlay)
library(MacKinlay)
library(MacKinlay)
library(MacKinlay)
library(MacKinlay)
library(MacKinlay)
library(MacKinlay)
library(MacKinlay)
library(MacKinlay)
library(MacKinlay)
library(MacKinlay)
library(MacKinlay)
rm(list=ls())
library(MacKinlay)
loadSulzbachDaten
library(MacKinlay)
loadSulzbachDate
loadSulzbachDaten
rm(list=ls())
library(MacKinlay)
loadSulzbachDaten()
rm(list=ls())
library(MacKinlay)
rm(list=ls())
library(MacKinlay)
loadSulzbachDaten
loadSulzbachDaten(Gruppe = "A", inProzent = TRUE)
rm(list=ls())
library(MacKinlay)
KURS1 <- KURS
KURS2
dim(KURS2)
devtools::use_data(KURS1)
#'
#' @author Harald Fiedler
#' @description Stellt Datensätze bereit
#' @details Stellt unter ISIN die zu untersuchenden Firmenindex bereit und unter KURS alle Aktienkurse
#' @title loadSulbachDaten
#' @param Gruppe String der Länge 1. Entweder "A", "B", "C", "AandB", oder "AxorB". Es handelt sich dabei um Firmengruppen, die unterschiedlich mit Pensionsrisiken umgehen.
#' @param inProzent Boolean der Länge 1. Gibt an, ob die Analyse auf Basis absoluter Aktienkurse stattfindet, oder in relaitiven Prozentänderungen zum ersten Tag des Event-Windows
#'
loadSulzbachDaten <- function(Gruppe, inProzent){
if (Gruppe=="A"){ISIN <<- ISIN_A}
if (Gruppe=="B"){ISIN <<- ISIN_B}
if (Gruppe=="C"){ISIN <<- ISIN_C}
if (Gruppe=="AandB"){ISIN <<- ISIN_AandB}
if (Gruppe=="AxorB"){ISIN <<- ISIN_AorB}
ifelse(inProzent, KURS <<- KURS2[, c(1:207, 209:586)], KURS <<- KURS1) # Firma 208 macht Probleme wegen fehlender Startwerte
#rm(ISIN_A, envir=.GlobalEnv)
#rm(ISIN_B, envir=.GlobalEnv)
#rm(ISIN_C, envir=.GlobalEnv)
#rm(ISIN_AandB, envir=.GlobalEnv)
#rm(ISIN_AorB, envir=.GlobalEnv)
#rm(KURS2, envir = .GlobalEnv)
}
loadSulzbachDaten(Gruppe = "A", inProzent = TRUE)
rm(list=ls())
library(MacKinlay)
loadSulzbachDaten(Gruppe = "A", inProzent = TRUE)
rm(list=ls())
library(MacKinlay)
loadSulzbachDaten(Gruppe = "A", inProzent = TRUE)
KURS2[, c(1:207, 209:586)]
#'
#' @author Harald Fiedler
#' @description Stellt Datensätze bereit
#' @details Stellt unter ISIN die zu untersuchenden Firmenindex bereit und unter KURS alle Aktienkurse
#' @title loadSulbachDaten
#' @param Gruppe String der Länge 1. Entweder "A", "B", "C", "AandB", oder "AxorB". Es handelt sich dabei um Firmengruppen, die unterschiedlich mit Pensionsrisiken umgehen.
#' @param inProzent Boolean der Länge 1. Gibt an, ob die Analyse auf Basis absoluter Aktienkurse stattfindet, oder in relaitiven Prozentänderungen zum ersten Tag des Event-Windows
#'
loadSulzbachDaten <- function(Gruppe, inProzent){
if (Gruppe=="A"){ISIN <<- ISIN_A}
if (Gruppe=="B"){ISIN <<- ISIN_B}
if (Gruppe=="C"){ISIN <<- ISIN_C}
if (Gruppe=="AandB"){ISIN <<- ISIN_AandB}
if (Gruppe=="AxorB"){ISIN <<- ISIN_AorB}
ifelse(inProzent, KURS <<- KURS2[, c(1:207, 209:586)], KURS <<- KURS1) # Firma 208 macht Probleme wegen fehlender Startwerte
return(NULL)
#rm(ISIN_A, envir=.GlobalEnv)
#rm(ISIN_B, envir=.GlobalEnv)
#rm(ISIN_C, envir=.GlobalEnv)
#rm(ISIN_AandB, envir=.GlobalEnv)
#rm(ISIN_AorB, envir=.GlobalEnv)
#rm(KURS2, envir = .GlobalEnv)
}
loadSulzbachDaten(Gruppe = "A", inProzent = TRUE)
loadSulzbachDaten(Gruppe = "A", inProzent = FALSE)
loadSulzbachDaten(Gruppe = "A", inProzent = TRUE)
buildEventFrame(eventdate = 260, left = 3, right = 3, L_est = 100, ISIN = ISIN, Puffer = 72, KURS = KURS)
dim(buildEventFrame(eventdate = 260, left = 3, right = 3, L_est = 100, ISIN = ISIN, Puffer = 72, KURS = KURS))
loadSulzbachDaten(Gruppe = "B", inProzent = TRUE)
dim(buildEventFrame(eventdate = 260, left = 3, right = 3, L_est = 100, ISIN = ISIN, Puffer = 72, KURS = KURS))
loadSulzbachDaten(Gruppe = "C", inProzent = TRUE)
dim(buildEventFrame(eventdate = 260, left = 3, right = 3, L_est = 100, ISIN = ISIN, Puffer = 72, KURS = KURS))
loadSulzbachDaten(Gruppe = "AandB", inProzent = TRUE)
dim(buildEventFrame(eventdate = 260, left = 3, right = 3, L_est = 100, ISIN = ISIN, Puffer = 72, KURS = KURS))
loadSulzbachDaten(Gruppe = "AxorB", inProzent = TRUE)
dim(buildEventFrame(eventdate = 260, left = 3, right = 3, L_est = 100, ISIN = ISIN, Puffer = 72, KURS = KURS))
loadSulzbachDaten(Gruppe = "C", inProzent = TRUE)
dim(buildEventFrame(eventdate = 260, left = 3, right = 3, L_est = 100, ISIN = ISIN, Puffer = 72, KURS = KURS))
loadSulzbachDaten(Gruppe = "A", inProzent = TRUE)
dim(buildEventFrame(eventdate = c(260, 555, 646, 809, 958)[1], left = 3, right = 3, L_est = 100, ISIN = ISIN, Puffer = 72, KURS = KURS))
analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=5, right=5, L_Est=200, alpha=0.01, inProzent = TRUE)
analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
Gruppe="A"
analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
rm(list=ls())
library(MacKinlay)
analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
Gruppe="A"
eventdate=260
loadSulzbachDaten(Gruppe=Gruppe, inProzent = inProzent)
inProzent=TRUE
loadSulzbachDaten(Gruppe=Gruppe, inProzent = inProzent)
L_win = right + abs(left) + 1 # lenght event window
right=5
L_win = right + abs(left) + 1 # lenght event window
left=5
L_win = right + abs(left) + 1 # lenght event window
L_win
EventFrame <- buildEventFrame(eventdate = eventdate, Puffer = Puffer, left = left, right = right, L_est = L_est, ISIN=ISIN, KURS=KURS)
L_est=200
EventFrame <- buildEventFrame(eventdate = eventdate, Puffer = Puffer, left = left, right = right, L_est = L_est, ISIN=ISIN, KURS=KURS)
Puffer=50
EventFrame <- buildEventFrame(eventdate = eventdate, Puffer = Puffer, left = left, right = right, L_est = L_est, ISIN=ISIN, KURS=KURS)
EventFrame
AR_it <- apply(EventFrame[, 5:ncol(EventFrame)], 2, calc_AR_it,
# Params
estimationWindow = EventFrame$estimationWindow,
eventWindow = EventFrame$eventWindow,
Market = EventFrame$Market)
varHat_epislon_i <- apply(EventFrame[, 5:ncol(EventFrame)], 2, calc_varHat_epsilon_it,
#Params
estimationWindow = EventFrame$estimationWindow,
eventWindow = EventFrame$eventWindow,
Market = EventFrame$Market)
#Schätzer basiert auf EstimationWindow
critical_values_left <- qnorm(alpha, sd=sqrt(varHat_epislon_i), mean=0)
critical_values_right <- qnorm(1-alpha, sd=sqrt(varHat_epislon_i), mean=0)
alpha=.01
critical_values_left <- qnorm(alpha, sd=sqrt(varHat_epislon_i), mean=0)
critical_values_right <- qnorm(1-alpha, sd=sqrt(varHat_epislon_i), mean=0)
ergebnisAR_it <- list(AR_it = AR_it,
KIunten = critical_values_left,
KIoben = critical_values_right,
varHat_epislon_i = varHat_epislon_i
)
CAR_it <- apply(AR_it, 2, cumsum)
AR_it
EventFrame
dim(EventFrame)
Tau <- 1:nrow(KURS)-eventdate
Tau
estimationWindow <- rep(FALSE, times=nrow(KURS))
estimationWindow[(eventdate+left-L_est-Puffer):(eventdate+left-1-Puffer)] <- TRUE
eventWindow <- rep(FALSE, times=nrow(KURS))
eventWindow[(eventdate+left):(eventdate+right)] <- TRUE
Market <- KURS$SXXP
Firmen <- KURS[ , is.element(names(KURS), ISIN)  ]
EventFrame <- data.frame(Tau, estimationWindow, eventWindow, Market, Firmen)
EventFrame
EventFrame
AR_it <- apply(EventFrame[, 5:ncol(EventFrame)], 2, calc_AR_it,
# Params
estimationWindow = EventFrame$estimationWindow,
eventWindow = EventFrame$eventWindow,
Market = EventFrame$Market)
AR_it
EventFrame$estimationWindow
EventFrame$eventWindow
left=-5
EventFrame <- buildEventFrame(eventdate = eventdate, Puffer = Puffer, left = left, right = right, L_est = L_est, ISIN=ISIN, KURS=KURS)
EventFrame <- buildEventFrame(eventdate = eventdate, Puffer = Puffer, left = left, right = right, L_est = L_est, ISIN=ISIN, KURS=KURS)
EventFrame
EventFrame$estimationWindow
EventFrame$eventWindow
AR_it <- apply(EventFrame[, 5:ncol(EventFrame)], 2, calc_AR_it,
# Params
estimationWindow = EventFrame$estimationWindow,
eventWindow = EventFrame$eventWindow,
Market = EventFrame$Market)
AR_it
analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
rm(list=ls())
library(MacKinlay)
analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
str(Firmenanalyse)
ISIN
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = ISIN[100])
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = ISIN[101])
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = ISIN[90])
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = ISIN[70])
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = ISIN[70])
ISIN
ISIN[70]
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = ISIN[70])
ISIN[70]
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[70]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[71]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[72]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[73]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[74]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[75]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[76]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[77]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[78]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[178]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[179]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[199]))
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19]))
str(Firmenanalyse)
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = FALSE)
str(Firmenanalyse)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = FALSE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[119])) # 19.te-Firma
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[129])) # 19.te-Firma
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[139])) # 19.te-Firma
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[122])) # 19.te-Firma
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.05, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.10, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=30, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=70, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=100, alpha=0.01, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=100, left=-5, right=5, L_est=100, alpha=0.01, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
library(MacKinlay)
rm(list=ls())
library(MacKinlay)
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
MacKinlay::aggregierFirmen()
rm(list=ls())
library(MacKinlay)
Firmenanalyse <- analysiereFirmen(Gruppe="A", eventdate=260, Puffer=50, left=-5, right=5, L_est=200, alpha=0.01, inProzent = TRUE)
plotFirma(Firmenanalyse = Firmenanalyse, FirmaISIN = as.character(ISIN[19])) # 19.te-Firma
aggregierFirmen(Firmenanalyse = Firmenanalyse)
aggregiereFirmen(Firmenanalyse = Firmenanalyse)
plotMarkt(Marktanalyse = Marktanalyse, DDay = 5)
Marktanalyse <- aggregiereFirmen(Firmenanalyse = Firmenanalyse)
plotMarkt(Marktanalyse = Marktanalyse, DDay = 5)
plotMarkt(Marktanalyse = Marktanalyse, DDay = 2)
plotMarkt(Marktanalyse = Marktanalyse, DDay = -2)
plotMarkt(Marktanalyse = Marktanalyse, DDay = -0)
plotMarkt(Marktanalyse = Marktanalyse, DDay = -1)
plotMarkt(Marktanalyse = Marktanalyse, DDay = -2)
plotMarkt(Marktanalyse = Marktanalyse, DDay = -5)
MacKinlayTable(Marktanalyse = Marktanalyse, LaTeX = FALSE)
MacKinlayTable(Marktanalyse = Marktanalyse, LaTeX = TRUE)
library(xtable)
install.packages("xtable", depe=TRUE)
library(MacKinlay)
MacKinlayTable(Marktanalyse = Marktanalyse, LaTeX = TRUE)
